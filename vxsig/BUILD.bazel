# Copyright 2011-2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//vxsig/bazel:build_defs.bzl", "VXSIG_DEFAULT_COPTS")

licenses(["notice"])

exports_files(["LICENSE"])

# A C++ library with the core algorithms.
cc_library(
    name = "sequence_utils",
    srcs = ["longest_common_subsequence.cc"],
    hdrs = [
        "common_subsequence.h",
        "hamming.h",
        "longest_common_subsequence.h",
        "subsequence_regex.h",
    ],
    copts = VXSIG_DEFAULT_COPTS,
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
    ],
)

cc_test(
    name = "hamming_test",
    size = "small",
    srcs = ["hamming_test.cc"],
    copts = VXSIG_DEFAULT_COPTS,
    visibility = ["//visibility:private"],
    deps = [
        ":sequence_utils",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "longest_common_subsequence_test",
    size = "small",
    srcs = ["longest_common_subsequence_test.cc"],
    copts = VXSIG_DEFAULT_COPTS,
    visibility = ["//visibility:private"],
    deps = [
        ":sequence_utils",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "common_subsequence_test",
    size = "small",
    srcs = ["common_subsequence_test.cc"],
    copts = VXSIG_DEFAULT_COPTS,
    visibility = ["//visibility:private"],
    deps = [
        ":sequence_utils",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "subsequence_regex_test",
    size = "small",
    srcs = ["subsequence_regex_test.cc"],
    copts = VXSIG_DEFAULT_COPTS,
    visibility = ["//visibility:private"],
    deps = [
        ":sequence_utils",
        "@com_google_absl//absl/memory",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "binexport2_cc_proto",
    hdrs = ["binexport2.pb.h"],
    include_prefix = "third_party/zynamics/binexport",
    visibility = ["//visibility:public"],
    deps = ["@com_google_binexport//:binexport2_cc_proto"],
)

# This library contains readers for the BinDiff and BinExport file formats that
# are specific to vxsig.
cc_library(
    name = "file_readers",
    srcs = [
        "binexport_reader.cc",
        "diff_result_reader.cc",
    ],
    hdrs = [
        "binexport_reader.h",
        "diff_result_reader.h",
    ],
    copts = VXSIG_DEFAULT_COPTS,
    deps = [
        ":binexport2_cc_proto",
        ":types",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_binexport//:binexport_util",
        "@com_google_binexport//:status",
        "@com_google_binexport//:types",
        "@org_sqlite//:sqlite",
    ],
)

cc_test(
    name = "diff_result_reader_test",
    size = "small",
    srcs = ["diff_result_reader_test.cc"],
    copts = VXSIG_DEFAULT_COPTS,
    data = [
        "testdata/1794a0afbfc38411dec87fa2660d6dd6515cf8d03cb32bb24a1d7a8e1ecf30fa_vs_1b0a84953909816c1945c2153605c2ddeb3b138fb4c262c7262cd9689ed25f82.BinDiff",
        "testdata/sshd.korg_vs_sshd.trojan1.BinDiff",
    ],
    visibility = ["//visibility:private"],
    deps = [
        ":file_readers",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_binexport//:filesystem",
        "@com_google_binexport//:status_matchers",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "binexport_reader_test",
    size = "small",
    srcs = ["binexport_reader_test.cc"],
    copts = VXSIG_DEFAULT_COPTS,
    data = [
        "testdata/0000050d2efbd0602bed34669e2f2cb01f6e91e35014fafd35d80ada62d6169a-PID_2192_-Name_LoadDLL.exe_.BinExport",
        "testdata/6d661e63d51d2b38c40d7a16d0cd957a125d397e13b1e50280c3d06bc26bb315.BinExport",
    ],
    visibility = ["//visibility:private"],
    deps = [
        ":file_readers",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_binexport//:filesystem",
        "@com_google_binexport//:status_matchers",
        "@com_google_googletest//:gtest_main",
    ],
)

# Definitions for the vxsig AV signature generator.
proto_library(
    name = "vxsig_proto",
    srcs = ["vxsig.proto"],
)

cc_proto_library(
    name = "vxsig_cc_proto",
    visibility = ["//visibility:public"],
    deps = [":vxsig_proto"],
)

# The vxsig core data structure.
cc_library(
    name = "match_chain_table",
    srcs = ["match_chain_table.cc"],
    hdrs = ["match_chain_table.h"],
    copts = VXSIG_DEFAULT_COPTS,
    deps = [
        ":binexport2_cc_proto",
        ":file_readers",
        ":types",
        ":vxsig_cc_proto",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_binexport//:filesystem",
    ],
)

cc_test(
    name = "match_chain_table_test",
    size = "small",
    srcs = ["match_chain_table_test.cc"],
    copts = VXSIG_DEFAULT_COPTS,
    visibility = ["//visibility:private"],
    deps = [
        ":match_chain_table",
        "@com_google_absl//absl/memory",
        "@com_google_binexport//:filesystem",
        "@com_google_googletest//:gtest_main",
    ],
)

# A library with functions for working with function and basic block candidates.
cc_library(
    name = "candidates",
    srcs = ["candidates.cc"],
    hdrs = ["candidates.h"],
    copts = VXSIG_DEFAULT_COPTS,
    deps = [
        ":match_chain_table",
        ":sequence_utils",
        ":types",
        "@com_google_absl//absl/memory",
    ],
)

cc_test(
    name = "candidates_test",
    size = "small",
    srcs = ["candidates_test.cc"],
    copts = VXSIG_DEFAULT_COPTS,
    visibility = ["//visibility:private"],
    deps = [
        ":candidates",
        "@com_google_binexport//:filesystem",
        "@com_google_googletest//:gtest_main",
    ],
)

# This library computes generic (format-agnostic) signatures for a set of basic
# block candidates.
cc_library(
    name = "generic_signature",
    srcs = ["generic_signature.cc"],
    hdrs = ["generic_signature.h"],
    copts = VXSIG_DEFAULT_COPTS,
    deps = [
        ":match_chain_table",
        ":sequence_utils",
        ":types",
        ":vxsig_cc_proto",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/log:die_if_null",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
    ],
)

cc_test(
    name = "generic_signature_test",
    size = "small",
    srcs = ["generic_signature_test.cc"],
    copts = VXSIG_DEFAULT_COPTS,
    visibility = ["//visibility:private"],
    deps = [
        ":generic_signature",
        ":vxsig_cc_proto",
        "@com_google_absl//absl/log:die_if_null",
        "@com_google_absl//absl/memory",
        "@com_google_binexport//:filesystem",
        "@com_google_binexport//:status_matchers",
        "@com_google_googletest//:gtest_main",
    ],
)

# A library with functions useful for testing signature formatters.
cc_library(
    name = "signature_test_util",
    srcs = ["signature_test_util.cc"],
    hdrs = ["signature_test_util.h"],
    copts = VXSIG_DEFAULT_COPTS,
    deps = [
        ":vxsig_cc_proto",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/types:span",
    ],
)

# A library that converts the format-agnostic signatures into the support target
# formats.
cc_library(
    name = "signature_formatter",
    srcs = [
        "clamav_signature_formatter.cc",
        "clamav_signature_formatter.h",
        "signature_formatter.cc",
        "yara_signature_formatter.cc",
        "yara_signature_formatter.h",
    ],
    hdrs = ["signature_formatter.h"],
    copts = VXSIG_DEFAULT_COPTS,
    deps = [
        ":generic_signature",
        ":types",
        ":vxsig_cc_proto",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/log:die_if_null",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        # "@com_google_ortools//linear_solver",  # Disabled, needs function corpus
    ],
)

cc_test(
    name = "signature_formatter_test",
    srcs = ["signature_formatter_test.cc"],
    copts = VXSIG_DEFAULT_COPTS,
    deps = [
        ":signature_formatter",
        ":signature_test_util",
        ":vxsig_cc_proto",
        "@com_google_binexport//:filesystem",
        "@com_google_binexport//:status_matchers",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "clamav_signature_formatter_test",
    size = "small",
    srcs = ["clamav_signature_formatter_test.cc"],
    copts = VXSIG_DEFAULT_COPTS,
    visibility = ["//visibility:private"],
    deps = [
        ":signature_formatter",
        ":signature_test_util",
        "@com_google_binexport//:filesystem",
        "@com_google_binexport//:status_matchers",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "yara_signature_test_util",
    srcs = ["yara_signature_test_util.cc"],
    hdrs = ["yara_signature_test_util.h"],
    copts = VXSIG_DEFAULT_COPTS,
    deps = ["@com_google_absl//absl/strings"],
)

cc_test(
    name = "yara_signature_formatter_test",
    size = "small",
    srcs = ["yara_signature_formatter_test.cc"],
    copts = VXSIG_DEFAULT_COPTS,
    data = ["testdata/livid1.db"],
    visibility = ["//visibility:private"],
    deps = [
        ":signature_formatter",
        ":yara_signature_test_util",
        "@com_google_absl//absl/log:die_if_null",
        "@com_google_absl//absl/strings",
        "@com_google_binexport//:filesystem",
        "@com_google_binexport//:status_matchers",
        "@com_google_googletest//:gtest_main",
    ],
)

# Main library to do the actual signature generation from a set of BinDiff
# result files.
cc_library(
    name = "siggen",
    srcs = ["siggen.cc"],
    hdrs = ["siggen.h"],
    copts = VXSIG_DEFAULT_COPTS,
    deps = [
        ":candidates",
        ":generic_signature",
        ":match_chain_table",
        ":types",
        ":vxsig_cc_proto",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/time",
        "@com_google_absl//absl/types:span",
    ],
)

cc_test(
    name = "siggen_test",
    size = "medium",
    srcs = ["siggen_test.cc"],
    copts = VXSIG_DEFAULT_COPTS,
    data = [
        "testdata/1794a0afbfc38411dec87fa2660d6dd6515cf8d03cb32bb24a1d7a8e1ecf30fa.BinExport",
        "testdata/1794a0afbfc38411dec87fa2660d6dd6515cf8d03cb32bb24a1d7a8e1ecf30fa_vs_1b0a84953909816c1945c2153605c2ddeb3b138fb4c262c7262cd9689ed25f82.BinDiff",
        "testdata/1b0a84953909816c1945c2153605c2ddeb3b138fb4c262c7262cd9689ed25f82.BinExport",
        "testdata/1b0a84953909816c1945c2153605c2ddeb3b138fb4c262c7262cd9689ed25f82_vs_1d3949acb5eb175af3cbc5f448ece50669a44743faec91e3d574dad9596a9d83.BinDiff",
        "testdata/1d3949acb5eb175af3cbc5f448ece50669a44743faec91e3d574dad9596a9d83.BinExport",
        "testdata/328b26dc3f0d8543e151495f4d6f3960323e3f51223522c2e4cd1e2fe9f9ed8f_vs_61971471cedcb4daed8d07ad79297568ffdaa17eb4ff301dc953cfafa91a4507.BinDiff",
        "testdata/592fb377afa9f93670a23159aa585e0eca908b97571ab3218e026fea3598cc16.BinExport",
        "testdata/592fb377afa9f93670a23159aa585e0eca908b97571ab3218e026fea3598cc16_vs_65d25a86feb6d15527e398d7b5d043e7712b00e674bc6e8cf2a709a0c6f9b97b.BinDiff",
        "testdata/61971471cedcb4daed8d07ad79297568ffdaa17eb4ff301dc953cfafa91a4507_vs_8433c9a6345d210d2196096461804d7137bbf2a6b71b20cc21f4ecf7d15ef6c2.BinDiff",
        "testdata/65d25a86feb6d15527e398d7b5d043e7712b00e674bc6e8cf2a709a0c6f9b97b.BinExport",
    ],
    visibility = ["//visibility:private"],
    deps = [
        ":generic_signature",
        ":siggen",
        ":signature_formatter",
        ":yara_signature_test_util",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_binexport//:filesystem",
        "@com_google_binexport//:status_matchers",
        "@com_google_googletest//:gtest_main",
    ],
)

# Utility to generate signatures from the command-line. Useful mainly for
# debugging the signature generator locally. Use "vx schedulesignature"
# instead.
cc_binary(
    name = "vxsig",
    srcs = ["siggen_main.cc"],
    copts = VXSIG_DEFAULT_COPTS,
    deps = [
        ":siggen",
        ":signature_formatter",
        ":types",
        ":vxsig_cc_proto",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_binexport//:filesystem",
    ],
)

# Small utility library to centralize the generation of unique signature ids.
cc_library(
    name = "signature_definition_hash",
    srcs = ["signature_definition_hash.cc"],
    hdrs = ["signature_definition_hash.h"],
    copts = VXSIG_DEFAULT_COPTS,
    deps = [
        ":vxsig_cc_proto",
        "@com_google_absl//absl/hash",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
    ],
)

cc_test(
    name = "signature_definition_hash_test",
    srcs = ["signature_definition_hash_test.cc"],
    copts = VXSIG_DEFAULT_COPTS,
    deps = [
        ":signature_definition_hash",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "types",
    hdrs = ["types.h"],
    copts = VXSIG_DEFAULT_COPTS,
    visibility = ["//visibility:private"],
)
